// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
    relationMode = "prisma"
}

enum Role{
    ADMIN
    USER
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String  
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

model Twitter {
    id String @unique
    bearerToken String
}
model Draft {
    userId String @unique
    post String
}

model User {
    id            String    @id @default(cuid())
    name          String?
    image         String?
    password          String?
    email         String?   @unique
    emailVerified DateTime?
    role          Role @default(USER)
    accounts      Account[]
    sessions      Session[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}





model User {
  id           Int      @id @default(autoincrement())
  clerkUserId  String   @unique
  posts        Post[]
  drafts       Draft[]
  ideas        Idea[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
}

model Post {
  id          Int       @id @default(autoincrement())
  content     String
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  platform    Platform
  status      Status
  scheduledAt DateTime?
  tweetThread TweetThread[]
  imgUrls     Json
  poll        Poll?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Idea {
  id        Int      @id @default(autoincrement())
  content   String
  user      User     @relation(fields: [userId], references: [id])
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TweetThread {
  id      Int    @id @default(autoincrement())
  postId  Int
  post    Post   @relation(fields: [postId], references: [id])
  content String
}

model Poll {
  id      Int    @id @default(autoincrement())
  postId  Int
  post    Post   @relation(fields: [postId], references: [id])
  options Json
}

model Queue {
  id      Int        @id @default(autoincrement())
  day     String
  items   QueueItem[]
}

model QueueItem {
  id       Int    @id @default(autoincrement())
  time     String
  type     String
  queue    Queue  @relation(fields: [queueId], references: [id])
  queueId  Int
}

enum Platform {
  TWITTER
  LINKEDIN
  INSTAGRAM
  LENS_PROTOCOL
  FARCASTER
}

enum Status {
  PUBLISHED
  SCHEDULED
}
