// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model User {
  id             String          @id @default(cuid())
  clerkUserId    String          @unique
  posts          Post[]
  ideas          Idea[]
  transactions   Transaction[]
  githubTokens   GithubToken[]
  linkedInTokens LinkedInToken[]
  twitterTokens  TwitterToken[]
  projects       Project[]
  subscritpion   Subscription?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  Queue          Queue?

  @@index([clerkUserId])
  @@index([id])
}

model Project {
  id                         String @id @default(cuid())
  clerkUserId                String
  user                       User   @relation(fields: [clerkUserId], references: [clerkUserId])
  repoName                   String
  repoDescription            String @default("")
  repoUrl                    String @unique
  repoId                     String
  questionsAnswersJsonString Json   @default("{}")
  commitCount                Int

  @@index([clerkUserId])
  @@index([id])
}

model TwitterToken {
  id            String    @id @default(cuid())
  user          User      @relation(fields: [clerkUserId], references: [clerkUserId])
  clerkUserId   String
  client_id     String
  client_secret String
  access_token  String?   @unique
  refresh_token String?   @unique
  expires_in    DateTime?
  profileId     String?   @unique
  username      String?
  fullname      String?
  profile_image String?
  
  @@index([profileId])
  @@index([clerkUserId])
  @@index([id])
}

model GithubToken {
  id            String  @id @default(cuid())
  access_token  String  @unique
  refresh_token String? @unique
  user          User    @relation(fields: [clerkUserId], references: [clerkUserId])
  clerkUserId   String  @unique
  profileId     String? @unique

  expires_in               DateTime?
  refresh_token_expires_in DateTime?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  @@index([clerkUserId])
  @@index([id])
}

model LinkedInToken {
  id                       String    @id @default(cuid())
  profileId                String?
  access_token             String    @db.Text
  refresh_token            String?   @db.Text
  user                     User      @relation(fields: [clerkUserId], references: [clerkUserId])
  clerkUserId              String
  expires_in               DateTime?
  refresh_token_expires_in DateTime?
  createdAt                DateTime  @default(now())
  updatedAt                DateTime  @updatedAt

  @@index([profileId])
  @@index([clerkUserId])
  @@index([id])
}

enum SubscriptionType {
  FREE
  PRO
  ENTERPRISE
}

model Subscription {
  id             String           @id @default(cuid())
  user           User             @relation(fields: [clerkUserId], references: [clerkUserId])
  clerkUserId    String           @unique
  customerUserId String
  transaction    Transaction      @relation(fields: [transactionId], references: [clerkUserId])
  transactionId  String
  type           SubscriptionType @default(FREE)

  @@index([clerkUserId])
  @@index([transactionId])
}

model Transaction {
  id               String            @id @default(cuid())
  user             User              @relation(fields: [clerkUserId], references: [clerkUserId])
  clerkUserId      String            @unique
  amount           Int
  Subscription     Subscription[]
  status           TransactionStatus @default(PENDING)
  paymentDetails   Json?
  type             TransactionType
  refundStatus     RefundStatus?     @default(NOT_APPLICABLE)
  paymentGatewayId String
  createdAt        DateTime          @default(now())
  updatedAt        DateTime          @updatedAt
}

model Post {
  id             String    @id @default(cuid())
  user           User      @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)
  clerkUserId    String
  status         Status
  scheduledAt    DateTime?
  // content     Content[]
  content        Json
  defaultContent String    @db.Text
  socialSelected Json
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt

  @@index([updatedAt])
  @@index([status])
  @@index([clerkUserId])
  @@index([id])
}

// model Content {
//   id              String           @id @default(cuid())
//   postId          String
//   post            Post             @relation(fields: [postId], references: [id], onDelete: Cascade)
//   // socialSelected  SocialSelected[]
//   content         String
//   Twitter         TwitterThread?   @relation(fields: [twitterThreadId], references: [id], onDelete: Cascade)
//   imgUrls         Json?
//   poll            Poll?            @relation(fields: [pollId], references: [id], onDelete: Cascade)
//   createdAt       DateTime         @default(now())
//   updatedAt       DateTime         @updatedAt
//   twitterThreadId String?
//   pollId          Int?
//   socialSelected Json?

//   @@index([id])
//   @@index([twitterThreadId])
//   @@index([pollId])
//   @@index([postId])
// }

// model SocialSelected {
//   id         String   @id @default(cuid())
//   platform   Platform
//   platformId String
//   Content    Content  @relation(fields: [contentId], references: [id], onDelete: Cascade)
//   contentId  String

//   @@index([id])
//   @@index([contentId])
// }

// model TwitterThread {
//   id     String    @id @default(cuid())
//   tweet  Content[]
//   post   Post      @relation(fields: [postId], references: [id], onDelete: Cascade)
//   postId String

//   @@index([postId])
// }

model Idea {
  id          String   @id @default(cuid())
  content     String
  user        User     @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)
  clerkUserId String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([clerkUserId])
}

// model Poll {
//   id      Int       @id @default(autoincrement())
//   postId  String    @unique
//   options Json
//   Content Content[]

//   @@index([id])
// }

model Queue {
  id          String      @id @default(cuid())
  user        User        @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)
  clerkUserId String      @unique
  day         String
  items       QueueItem[]
}

model QueueItem {
  id      String @id @default(cuid())
  time    String
  type    String
  queue   Queue  @relation(fields: [queueId], references: [id], onDelete: Cascade)
  queueId String

  @@index([queueId])
}

enum Platform {
  DEFAULT
  TWITTER
  LINKEDIN
  INSTAGRAM
  LENS_PROTOCOL
  FARCASTER
}

enum TransactionStatus {
  PENDING
  FAILED
  SUCCESSFUL
}

enum TransactionType {
  SUBSCRIPTION_PURCHASE
  REFUND
}

enum RefundStatus {
  NOT_APPLICABLE
  PENDING
  PROCESSED
}

enum Status {
  SAVED
  PUBLISHED
  SCHEDULED
}
