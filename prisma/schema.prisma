// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

model User {
  clerkUserId        String             @unique
  userDetails        Json?
  posts              Post[]
  ideas              Idea[]
  githubTokens       GithubToken[]
  linkedInTokens     LinkedInToken[]
  twitterTokens      TwitterToken[]
  projects           Project[]
  organizations      Organization[]
  currentPlan        SubscriptionPlans  @default(FREE)
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  userUsage          UserUsage?
  organizationUsers  OrganizationUser[]
  lsSubscriptionId   String?            @unique @map(name: "ls_subscription_id")
  lsCustomerId       String?            @unique @map(name: "ls_customer_id")
  lsVariantId        Int?
  lsCurrentPeriodEnd DateTime?          @map(name: "ls_current_period_end")

  @@index([clerkUserId])
}

model Organization {
  id            String                @id @default(cuid())
  clerkUserId   String
  user          User                  @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)
  name          String
  logo          String?
  users         OrganizationUser[]
  Project       Project[]
  TwitterToken  TwitterToken[]
  GithubToken   GithubToken[]
  LinkedInToken LinkedInToken[]
  Post          Post[]
  Idea          Idea[]
  invites       OrganizationInvites[]
  createdAt     DateTime              @default(now())
  updatedAt     DateTime              @updatedAt

  @@index([clerkUserId])
}

model OrganizationInvites {
  id             String       @id @default(nanoid(11))
  email          String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  role           Role
  status         InviteStatus
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([organizationId])
}

model OrganizationUser {
  id             String       @id @default(nanoid(11))
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  user           User         @relation(fields: [clerkUserId], references: [clerkUserId])
  clerkUserId    String
  role           Role
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@index([clerkUserId])
  @@index([organizationId])
}

model Project {
  id                         String        @id @default(nanoid(11))
  clerkUserId                String?
  user                       User?         @relation(fields: [clerkUserId], references: [clerkUserId])
  organizationId             String?       @default("")
  projectName                String?
  repoName                   String
  repoDescription            String        @default("")
  repoUrl                    String        @unique
  repoId                     String
  questionsAnswersJsonString Json          @default("{}")
  commitCount                Int
  posts                      Post[]
  createdAt                  DateTime      @default(now())
  updatedAt                  DateTime      @default(now()) @updatedAt
  Organization               Organization? @relation(fields: [organizationId], references: [id])

  @@index([clerkUserId])
  @@index([id])
  @@index([organizationId])
}

model TwitterToken {
  id             String        @id @default(nanoid(11))
  user           User?         @relation(fields: [clerkUserId], references: [clerkUserId])
  organizationId String?
  clerkUserId    String?
  client_id      String
  client_secret  String
  access_token   String?       @unique
  refresh_token  String?       @unique
  expires_in     DateTime?
  profileId      String?       @unique
  username       String?
  fullname       String?
  profile_image  String?
  Organization   Organization? @relation(fields: [organizationId], references: [id])

  @@index([profileId])
  @@index([clerkUserId])
  @@index([id])
  @@index([organizationId])
}

model GithubToken {
  id                           String        @id @default(nanoid(11))
  access_token                 String        @unique
  refresh_token                String?       @unique
  user                         User?         @relation(fields: [clerkUserId], references: [clerkUserId])
  organizationId               String?
  clerkUserId                  String?
  profileId                    String?
  expires_in                   DateTime?
  refresh_token_expires_in     DateTime?
  createdAt                    DateTime      @default(now())
  updatedAt                    DateTime      @updatedAt
  Organization                 Organization? @relation(fields: [organizationId], references: [id])
  organizationLsSubscriptionId String?

  @@index([clerkUserId])
  @@index([id])
  @@index([organizationId])
}

model LinkedInToken {
  id                       String        @id @default(nanoid(11))
  profileId                String?
  access_token             String        @db.Text
  refresh_token            String?       @db.Text
  user                     User?         @relation(fields: [clerkUserId], references: [clerkUserId])
  organizationId           String?
  clerkUserId              String?
  expires_in               DateTime?
  refresh_token_expires_in DateTime?
  createdAt                DateTime      @default(now())
  updatedAt                DateTime      @updatedAt
  Organization             Organization? @relation(fields: [organizationId], references: [id])

  @@index([profileId])
  @@index([clerkUserId])
  @@index([id])
  @@index([organizationId])
}

model UserUsage {
  clerkUserId    String   @unique
  user           User     @relation(fields: [clerkUserId], references: [clerkUserId])
  scheduledposts Int      @default(11)
  scheduledtime  Int      @default(8)
  projects       Int      @default(3)
  socialaccounts Int      @default(0)
  generatedposts Int      @default(50)
  drafts         Int      @default(15)
  ideas          Int      @default(11)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([clerkUserId])
}

model Post {
  id             String        @id @default(nanoid(11))
  user           User?         @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)
  clerkUserId    String?
  status         Status
  scheduledAt    DateTime?
  organizationId String?
  content        Json
  projectId      String?
  project        Project?      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  Organization   Organization? @relation(fields: [organizationId], references: [id])

  @@index([updatedAt])
  @@index([status])
  @@index([clerkUserId])
  @@index([id])
  @@index([projectId])
  @@index([organizationId])
}

model Idea {
  id             String        @id @default(nanoid(11))
  content        String
  user           User?         @relation(fields: [clerkUserId], references: [clerkUserId], onDelete: Cascade)
  clerkUserId    String?       @unique
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  organizationId String?
  Organization   Organization? @relation(fields: [organizationId], references: [id])

  @@index([clerkUserId])
  @@index([organizationId])
}

enum SubscriptionPlans {
  FREE
  PRO
  PRO2
  PRO3
}

enum Platform {
  DEFAULT
  TWITTER
  LINKEDIN
  INSTAGRAM
  LENS_PROTOCOL
  FARCASTER
}

enum RefundStatus {
  NOT_APPLICABLE
  PENDING
  PROCESSED
}

enum Status {
  SAVED
  PUBLISHED
  SCHEDULED
}

enum Role {
  OWNER
  ADMIN
  EDITOR
  MEMBER
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
  CANCELLED
}
